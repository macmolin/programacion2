public class StackArray {
    private int[] stack;
    private int top;
    private int capacity;

    // Constructor
    public StackArray(int size) {
        capacity = size;
        stack = new int[capacity];
        top = -1;
    }

    // M√©todo push (insertar)
    public void push(int value) {
        if (isFull()) {
            System.out.println("Error: La pila est√° llena.");
        } else {
            stack[++top] = value;
        }
    }

    // M√©todo pop (eliminar el √∫ltimo)
    public int pop() {
        if (isEmpty()) {
            System.out.println("Error: La pila est√° vac√≠a.");
            return -1;
        } else {
            return stack[top--];
        }
    }

    // M√©todo peek (ver el √∫ltimo sin eliminar)
    public int peek() {
        if (isEmpty()) {
            System.out.println("Error: La pila est√° vac√≠a.");
            return -1;
        } else {
            return stack[top];
        }
    }

    // M√©todo isEmpty (verificar si est√° vac√≠a)
    public boolean isEmpty() {
        return top == -1;
    }

    // M√©todo isFull (verificar si est√° llena)
    public boolean isFull() {
        return top == capacity - 1;
    }

    // üîπ M√©todo adicional 1: cantidad de elementos en la pila
    public int size() {
        return top + 1;
    }

    // üîπ M√©todo adicional 2: vaciar completamente la pila
    public void clear() {
        top = -1;
    }

    // M√©todo para imprimir el contenido de la pila (opcional, para pruebas)
    public void printStack() {
        if (isEmpty()) {
            System.out.println("La pila est√° vac√≠a.");
        } else {
            System.out.print("Contenido de la pila: ");
            for (int i = 0; i <= top; i++) {
                System.out.print(stack[i] + " ");
            }
            System.out.println();
        }
    }
}